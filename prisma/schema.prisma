generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model categories {
  id                 Int                  @id @default(autoincrement())
  name               String?              @db.VarChar(100)
  description        String?              @db.VarChar(100)
  start_time         Int?            
  end_time           Int?            
  sex                String?              @db.VarChar(100)
  distance           Int?
  lap                Int?
  run                Boolean?             @default(false)
  event_id           Int?
  events             events?              @relation(fields: [event_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "categories_ibfk_1")
  event_participants event_participants[] @ignore
  race_results       race_results[]
  riders             riders[]

  @@index([event_id], map: "event_id")
}

model teams {
  id                 Int                  @id @default(autoincrement())
  name               String?              @db.VarChar(100)
  province           String?              @db.VarChar(100)
  nationality        String?              @db.VarChar(5)
  riders             riders[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model event_participants {
  event_id          Int?
  rider_id          Int?
  category_id       Int?
  registration_date Int?   
  events            events?     @relation(fields: [event_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "event_participants_ibfk_1")
  categories        categories? @relation(fields: [category_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "event_participants_ibfk_2")
  riders            riders?     @relation(fields: [rider_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "event_participants_ibfk_3")

  @@index([category_id], map: "category_id")
  @@index([event_id], map: "event_id")
  @@index([rider_id], map: "rider_id")
  @@ignore
}

model events {
  id                 Int                  @id @default(autoincrement())
  name               String?              @db.VarChar(100)
  start_datetime     Int?            
  end_datetime       Int?            
  location           String?              @db.VarChar(70)
  desc_1             String?              @db.VarChar(100)
  desc_2             String?              @db.VarChar(100)
  commisioner        String?              @db.VarChar(70)
  race_director      String?              @db.VarChar(70)
  distance           Int?
  type               String?              @db.VarChar(30)
  registration_fee   Int?
  categories         categories[]
  event_participants event_participants[] @ignore
  race_results       race_results[]
  race_start         race_start[]
  riders             riders[]
}

model race_results {
  result_id   Int         @id @default(autoincrement())
  event_id    Int?
  rider_id    Int?
  category_id Int?
  lap_number  Int?
  finish_time Int?
  events      events?     @relation(fields: [event_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "race_results_ibfk_1")
  riders      riders?     @relation(fields: [rider_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "race_results_ibfk_2")
  categories  categories? @relation(fields: [category_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "race_results_ibfk_3")

  @@index([category_id], map: "category_id")
  @@index([event_id], map: "event_id")
  @@index([rider_id], map: "rider_id")
}

model race_start {
  race_start_id Int       @id @default(autoincrement())
  event_id      Int?
  rider_id      Int?
  start_time    Int?
  events        events?   @relation(fields: [event_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "race_start_ibfk_1")
  riders        riders?   @relation(fields: [rider_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "race_start_ibfk_2")

  @@index([event_id], map: "event_id")
  @@index([rider_id], map: "rider_id")
}

model riders {
  id                 Int                  @id @default(autoincrement())
  name               String?              @db.VarChar(100)
  age                Int?
  nationality        String?              @db.VarChar(5)
  team_id            Int
  bib                String?              @db.VarChar(5)
  vci_num            String?              @db.VarChar(10)
  id_b               Int?
  mac_no             String?              @db.VarChar(20)
  note               String?              @db.VarChar(20)
  note_1             String?              @db.VarChar(100)
  run_lap            Int?
  lap_no             Int?
  run                Boolean?             @default(true)
  event_id           Int
  category_id        Int
  event_participants event_participants[] @ignore
  race_results       race_results[]
  race_start         race_start[]
  categories         categories           @relation(fields: [category_id], references: [id], onUpdate: Restrict, map: "fk_category")
  events             events               @relation(fields: [event_id], references: [id], onUpdate: Restrict, map: "fk_event")
  teams              teams?               @relation(fields: [team_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_team")

  @@index([category_id], map: "fk_category")
  @@index([event_id], map: "fk_event")
  @@index([team_id], map: "fk_team")

}
